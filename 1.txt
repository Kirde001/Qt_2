по буквам лимит (5 символов), цифры пофиг; комбо - сделать двоеточия меж символами 
#include "data_processor.h"
#include <algorithm>
#include <QString>
#include <QChar> // Нужно для проверки символов
#include <QDebug> // Оставим для отладки, если нужно

void DataProcessor::processData(const QString &input, const QString &mode) {
    QString processedData;
    QString limitedInput; // Строка для хранения ввода после применения лимита букв
    int letterCount = 0;

    qDebug() << "DataProcessor: Received input:" << input << "with mode:" << mode;

    // --- НОВАЯ ЛОГИКА: Применяем лимит 5 букв ко всему вводу ПЕРЕД обработкой ---
    for (const QChar &ch : input) {
        if (ch.isLetter()) {
            if (letterCount < 5) {
                limitedInput += ch; // Добавляем букву, если лимит еще не достигнут
                letterCount++;
            }
            // Если это буква, но лимит уже достигнут, игнорируем ее
        } else {
            // Если это не буква (цифра, символ и т.д.), добавляем ее без ограничений
            limitedInput += ch;
        }
    }
    qDebug() << "DataProcessor: Input after applying 5-letter limit:" << limitedInput;
    // --- КОНЕЦ НОВОЙ ЛОГИКИ ---


    // Теперь применяем выбранный режим обработки к limitedInput
    if (mode == "В нижний регистр") {
        processedData = limitedInput.toLower();
        qDebug() << "DataProcessor: Mode 'В нижний регистр', result:" << processedData;
    } else if (mode == "Обратный порядок") {
        processedData = limitedInput;
        std::reverse(processedData.begin(), processedData.end());
        qDebug() << "DataProcessor: Mode 'Обратный порядок', result:" << processedData;
    } else if (mode == "Удалить пробелы") {
        processedData = limitedInput;
        processedData.remove(' ');
        qDebug() << "DataProcessor: Mode 'Удалить пробелы', result:" << processedData;
    } else if (mode == "Лимит букв и двоеточия") { // Этот режим теперь просто добавляет двоеточия к limitedInput
        qDebug() << "DataProcessor: Entering mode 'Лимит букв и двоеточия'";
        QString tempForColons = limitedInput; // Работаем с limitedInput

        // Вставляем двоеточия между символами limitedInput
        processedData = ""; // Очищаем processedData
        qDebug() << "DataProcessor: Starting colon insertion loop for:" << tempForColons;
        for (int i = 0; i < tempForColons.length(); ++i) {
            processedData += tempForColons.at(i);
            qDebug() << "DataProcessor: Appended char:" << tempForColons.at(i) << ", processedData so far:" << processedData;
            if (i < tempForColons.length() - 1) {
                processedData += ":";
                qDebug() << "DataProcessor: Appended colon, processedData so far:" << processedData;
            }
        }
        qDebug() << "DataProcessor: Colon insertion loop finished.";
        qDebug() << "DataProcessor: Final processedData for mode 'Лимит букв и двоеточия':" << processedData;

    } else {
        // Режим по умолчанию или неизвестный режим
        processedData = limitedInput; // Применяем к limitedInput
        qDebug() << "DataProcessor: Unknown mode, result (limitedInput):" << processedData;
    }

    emit dataProcessed(processedData);
    qDebug() << "DataProcessor: Signal dataProcessed emitted with result:" << processedData;
}

